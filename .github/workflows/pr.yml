name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm run lint

      - name: Run TypeScript type checking
        run: |
          cd apps/api && pnpm run type-check
          cd apps/web && pnpm run type-check

      - name: Run unit tests
        run: pnpm run test

      - name: Build API
        run: |
          cd apps/api && pnpm run build

      - name: Build Web
        run: |
          cd apps/web && pnpm run build

      - name: Package Lambda
        run: |
          cd apps/api && pnpm run package

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            apps/api/lambda-deployment.zip
            apps/web/dist/
          retention-days: 7

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    permissions:
      contents: read
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
          role-session-name: GitHubActions-TerraformPlan

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.5.0

      - name: Create terraform.tfvars from secrets
        working-directory: infra
        run: |
          cat > terraform.tfvars << EOF
          project_name = "${{ secrets.TF_VAR_PROJECT_NAME }}"
          environment = "${{ secrets.TF_VAR_ENVIRONMENT }}"
          aws_region = "${{ secrets.TF_VAR_AWS_REGION }}"
          cognito_domain_prefix = "${{ secrets.TF_VAR_COGNITO_DOMAIN_PREFIX }}"
          web_callback_urls = ${{ secrets.TF_VAR_WEB_CALLBACK_URLS }}
          web_logout_urls = ${{ secrets.TF_VAR_WEB_LOGOUT_URLS }}
          EOF

      - name: Terraform Init
        working-directory: infra
        run: terraform init

      - name: Terraform Format Check
        working-directory: infra
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: infra
        run: terraform validate

      - name: Terraform Plan
        working-directory: infra
        id: plan
        run: |
          terraform plan -no-color -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Comment PR with plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('infra/plan.txt', 'utf8');
            const maxLength = 65000; // GitHub comment limit
            
            let planOutput = plan;
            if (plan.length > maxLength) {
              planOutput = plan.substring(0, maxLength) + '\n\n... (truncated)';
            }
            
            const output = `## Terraform Plan üìã
            
            <details>
            <summary>Show Plan</summary>
            
            \`\`\`terraform
            ${planOutput}
            \`\`\`
            
            </details>
            
            **Plan Status:** ${{ steps.plan.outcome }}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Upload Terraform plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: infra/tfplan
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.5.0

      - name: Run tfsec security scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infra
          format: sarif
          soft_fail: true

  pr-status:
    name: PR Status Check
    runs-on: ubuntu-latest
    needs: [lint-and-test, terraform-plan, security-scan]
    if: always()
    
    steps:
      - name: Check job results
        run: |
          if [[ "${{ needs.lint-and-test.result }}" == "success" && 
                "${{ needs.terraform-plan.result }}" == "success" && 
                "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "‚úÖ All checks passed! PR is ready for review."
            exit 0
          else
            echo "‚ùå Some checks failed. Please review the results above."
            exit 1
          fi